#!/bin/bash


### load
## function
function _eF_load_x11Call () 
{
        ## export
        declare -gx "_es_loadX11_server" ;
        declare -gx "_es_loadX11_window" ;
        declare -gx "_es_loadX11_display" ;
        declare -gx "_es_loadX11_fullpath" ;
        declare -gx _es_loadX11_socket="${_es_loadX11_socket:-"split"}" ;
        ## variable
        declare -i _li_stat="0" ;
        ## select
        case "${_es_loadX11_socket}" in
                "split")
                        _eF_load_x11SocketSplit ;
                        ;;
                "share")
                        _eF_load_x11SocketShare ;
                        ;;
                *)
                        declare -i _li_stat="1" ;
                        ;;
        esac
        #       #
        case "${_es_loadX11_server}" in
                "xephyr")
                        _eF_load_x11ServerXephyr ;
                        ;;
                *)
                        declare -i _li_stat="1" ;
                        ;;
        esac
        #       #
        case "${_es_loadX11_window}" in
                "icewm")
                        _eF_load_x11WindowIcewm ;
                        ;;
        esac
        ## return
        return "${_li_stat}" ;
}
declare -fgxr "_eF_load_x11Call"
#       #
function _eF_load_x11SocketSplit () 
{
        ## require
        _eF_load_initRequirePath "/usr/bin/id" ;
        _eF_load_initRequirePath "/usr/bin/ss" ;
        _eF_load_initRequirePath "/usr/bin/rm" ;
        ## variable
        declare -i "_li_loadX11_socket" ;
        _li_loadX11_socket="$(( "$('/usr/bin/id' -u)" + "11" ))" ;
        ## select
        while true ; do
                '/usr/bin/ss' -a "/tmp/.X11-unix/X${_li_loadX11_socket}" ;
                #       #
                if [[ "${_li_loadX11_socket}" -lt "1" ]] ; then
                        _eF_load_initFinish "exit" "1" "ERROR" "Display too small." ;
                elif [[ "${_li_loadX11_socket}" -gt "60000" ]] ; then
                        _eF_load_initFinish "exit" "1" "ERROR" "Display too large." ;
                elif [[ "${DISPLAY}" == ":${_li_loadX11_socket}" ]] ; then
                        _li_loadX11_socket="$(( "${_li_loadX11_socket}" + "1" ))" ;
                elif [[ -e "/tmp/.X${_li_loadX11_socket}-lock" ]] ; then
                        _li_loadX11_socket="$(( "${_li_loadX11_socket}" + "1" ))" ;
                elif [[ "${?}" == "0" ]] ; then
                        _li_loadX11_socket="$(( "${_li_loadX11_socket}" + "1" ))" ;
                elif [[ -e "/tmp/.X11-unix/X${_li_loadX11_socket}" ]] ; then
                        '/usr/bin/rm' -v "/tmp/.X11-unix/X${_li_loadX11_socket}" ;
                        break ;
                else
                        break ;
                fi
        done
        ## variable
        declare -gx _es_loadX11_display=":${_li_loadX11_socket}" ;
        declare -gx _es_loadX11_fullpath="/tmp/.X11-unix/x${_li_loadX11_socket}" ;
}
declare -fgxr "_eF_load_x11SocketSplit"
#       #
function _eF_load_x11SocketShare () 
{
        ## require
        _eF_load_initRequirePath "/usr/bin/id" ;
        _eF_load_initRequirePath "/usr/bin/ss" ;
        _eF_load_initRequirePath "/usr/bin/rm" ;
        ## variable
        declare -i "_li_loadX11_socket" ;
        _li_loadX11_socket="$(( "$('/usr/bin/id' -u)" - "1" ))" ;
        ## select
        '/usr/bin/ss' -a "/tmp/.X11-unix/X${_li_loadX11_socket}" ;
        #       #
        if [[ "${_li_loadX11_socket}" -lt "1" ]] ; then
                _eF_load_initFinish "exit" "1" "ERROR" "Display too small." ;
        elif [[ "${_li_loadX11_socket}" -gt "60000" ]] ; then
                _eF_load_initFinish "exit" "1" "ERROR" "Display too large." ;
        elif [[ "${DISPLAY}" == ":${_li_loadX11_socket}" ]] ; then
                _eF_load_initFinish "exit" "1" "ERROR" "Display is used." ;
        elif [[ -e "/tmp/.X${_li_loadX11_socket}-lock" ]] ; then
                _eF_load_initFinish "exit" "1" "ERROR" "Display is locked." ;
        elif [[ "${?}" == "0" ]] ; then
                _eF_load_initFinish "exit" "1" "ERROR" "Socket is used." ;
        elif [[ -e "/tmp/.X11-unix/X${_li_loadX11_socket}" ]] ; then
                '/usr/bin/rm' -v "/tmp/.X11-unix/X${_li_loadX11_socket}" ;
        fi
        ## variable
        declare -gx _es_loadX11_display=":${_li_loadX11_socket}" ;
        declare -gx _es_loadX11_fullpath="/tmp/.X11-unix/x${_li_loadX11_socket}" ;
}
declare -fgxr "_eF_load_x11SocketShare"
#       #
function _eF_load_x11ServerXephyr () 
{
        ## require
        _eF_load_initRequireFunc "_eF_load_taskSet" ;
        _eF_load_initRequireVars "_es_loadX11_display" ;
        _eF_load_initRequireVars "_es_loadX11_fullpath" ;
        _eF_load_initRequireVars "_es_loadExec_name" ;
        _eF_load_initRequirePath "/usr/bin/Xephyr" ;
        _eF_load_initRequirePath "/usr/bin/sleep" ;
        ## common
        declare -ga "_la_args_xephyr"
        _la_args_xephyr=(
                "${_es_loadX11_display}"
                -br
                -resizeable
                -noreset
                -screen "1280x720"
                -dpi "125"
                -title "${_es_loadX11_display}#${_es_loadExec_name}"
                ${@}
        )
        #       #
        '/usr/bin/Xephyr' ${_la_args_xephyr[@]} &
        #       #
        _eF_load_initInfops "set" "xephyr" ;
        _eF_load_initExitno "${_gi_stat_xephyr}" "ERROR" "Xephyr error." ;
        _eF_load_taskSet "loadX11_server" "${_gi_stat_xephyr}" ;
        _eF_load_initInfops "cut" "xephyr" ;
        #       #
        while [[ ! -r "${_es_loadX11_fullpath}" ]] ; do
                '/usr/bin/sleep' "0.1s" ;
        done
}
declare -fgxr "_eF_load_x11ServerXephyr"
#       #
function _eF_load_x11WindowIcewm () 
{
        ## require
        _eF_load_initRequireVars "_es_loadX11_display" ;
        _eF_load_initRequireVars "_es_loadX11_fullpath" ;
        ## common
        declare -a "_la_args_bwraplua"
        _la_args_bwraplua=(
                ,q, ,c, ,y,
                ,re "03_lvl8_icewm"
                ,o --setenv "${_es_loadX11_fullpath}" "${_es_loadX11_fullpath}"
                ,o --setenv "DISPLAY" "${_es_loadX11_display}"
                ,co '/usr/bin/icewm'
                ,c "--theme=Infadel2"
                ,c ${@}
        )
        #       #
        "${_eS_bwraplua_package}" ${_la_args_bwraplua[@]}
        _eF_load_initExitno "${?}" "ERROR" "Icewm Failure." ;
}
declare -fgxr "_eF_load_x11WindowIcewm"

